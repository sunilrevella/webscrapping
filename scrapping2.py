# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'scrapping2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from selenium import webdriver
from bs4 import BeautifulSoup
import time
import pandas as pd
import sys
import os
class Ui_MainWindow21(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(-1, -1, 801, 601))
        self.frame.setStyleSheet("background-color: rgb(215, 203, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(180, 30, 371, 71))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(100, 100, 551, 421))
        self.frame_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:1 rgba(0, 0, 0, 124));")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.pushButton = QtWidgets.QPushButton(self.frame_2)
        self.pushButton.setGeometry(QtCore.QRect(150, 340, 91, 31))
        self.pushButton.setStyleSheet("background-color: rgb(0, 255, 255);\n"
"border-radius:5px;")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_2.setGeometry(QtCore.QRect(270, 340, 91, 31))
        self.pushButton_2.setStyleSheet("background-color: rgb(85, 255, 127);\n"
"border-radius:5px;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_3.setGeometry(QtCore.QRect(390, 340, 91, 31))
        self.pushButton_3.setStyleSheet("background-color: rgb(255, 85, 0);\n"
"border-radius:5px;")
        self.pushButton_3.setObjectName("pushButton_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_3.setGeometry(QtCore.QRect(120, 110, 311, 41))
        self.lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:20px;")
        self.lineEdit_3.setText("")
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_4.setGeometry(QtCore.QRect(120, 180, 311, 41))
        self.lineEdit_4.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(255, 255, 255);")
        self.lineEdit_4.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_4 = QtWidgets.QLabel(self.frame_2)
        self.label_4.setGeometry(QtCore.QRect(80, 280, 421, 31))
        self.label_4.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:1 rgba(171, 86, 86, 0));\n"
"color: rgb(255, 85, 0);")
        self.label_4.setText("")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Naukri.com Scrapper"))
        self.pushButton.setText(_translate("MainWindow", "SCRAP"))
        self.pushButton_2.setText(_translate("MainWindow", "open CSV"))
        self.pushButton_3.setText(_translate("MainWindow", "EXIT"))
        self.lineEdit_3.setPlaceholderText(_translate("MainWindow", "ENTER THE JOB TITLE YOU ARE LOOKING FOR"))
        self.lineEdit_4.setPlaceholderText(_translate("MainWindow", "ENTER THE LOCATION"))

    def scrap1(self):
        df = pd.DataFrame(columns=['Title','Company','Ratings','Reviews','Experience','Salary','Location','Job_Post_History','URL'])

        jt = self.lineEdit_3.text()
        jt=jt.lower()
        jt1 = jt.replace(" ","-")
        jt2 = jt.replace(" ","%20")
        location = self.lineEdit_4.text()
        location=location.lower()
        loc1 = location.replace(" ","-")
        loc2 = location.replace(" ","%20")

        for param in range(1,3):

             url = "https://www.naukri.com/"+ jt1 + "-jobs-in-"+ loc1 + "?k="+ jt2 +"&l="+ loc2
  # url = "https://www.naukri.com/java-developer-jobs-in-nagpur?k=java%20developer&l=nagpur"
             driver = webdriver.Chrome("C:/Users/AtharvKulkarni/chromedriver_win32/chromedriver.exe")
             driver.get(url)
             time.sleep(10)
             soup = BeautifulSoup(driver.page_source,'html.parser')

    # print(soup.prettify())
             driver.close()

             results = soup.find(class_='list')
             job_elems = results.find_all('article',class_='jobTuple bgWhite br4 mb-8')

             for job_elem in job_elems:

        # URL to apply for the job
                 URL = job_elem.find('a',class_='title fw500 ellipsis').get('href')
    #     print(URL.strip())

        # Post Title
                 Title = job_elem.find('a',class_='title fw500 ellipsis')

        # Company Name
                 Company = job_elem.find('a',class_='subTitle ellipsis fleft')

        # Ratings
                 rating_span = job_elem.find('span',class_='starRating fleft dot')

                 if rating_span is None:
                       continue
                 else:
                      Ratings = rating_span.text

        # Reviews Counts
                 Review_span = job_elem.find('a',class_='reviewsCount ml-5 fleft blue-text')
                 if Review_span is None:
                      continue
                 else:
                      Reviews = Review_span.text

        # Years of experience Required
                 Exp = job_elem.find('li',class_='fleft grey-text br2 placeHolderLi experience')
                 Exp_span = Exp.find('span',class_='ellipsis fleft fs12 lh16')
                 if Exp_span is None:
                      continue
                 else:
                    Experience = Exp_span.text

        # Salary offered for the job
                 Sal = job_elem.find('li',class_='fleft grey-text br2 placeHolderLi salary')
                 Sal_span = Sal.find('span',class_='ellipsis fleft fs12 lh16')
                 if Sal_span is None:
                       continue
                 else:
                      Salary = Sal_span.text

        # Location for the job post
                 Loc = job_elem.find('li',class_='fleft grey-text br2 placeHolderLi location')
                 Loc_exp = Loc.find('span',class_='ellipsis fleft fs12 lh16')
                 if Loc_exp is None:
                       continue
                 else:
                      Location = Loc_exp.text

        # Number of days since job posted
                 Hist = job_elem.find("div",["type br2 fleft grey","type br2 fleft green"])
                 Post_Hist = Hist.find('span',class_='fleft fw500')
                 if Post_Hist is None:
                       continue
                 else:
                       Post_History = Post_Hist.text

    #   Appending data to the DataFrame
                 df=df.append({'URL':URL,'Title':Title.text,'Company':Company.text,'Ratings':Ratings,'Reviews':Reviews,'Experience':Experience,'Salary':Salary,'Location':Location,'Job_Post_History':Post_History},ignore_index = True)
        df.shape
        df.head()
        loccc=os.getcwd()
        df.to_csv(loccc+"/Naukri.com_data.csv",index=False)
        self.label_4.setText("Scraping is done")

    def ope11(self):
       self.filee=os.getcwd()+"/Naukri.com_data.csv"
       os.startfile(self.filee)
    def exs1(self):
        sys.exit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow21()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ui.pushButton.clicked.connect(ui.scrap1)
    ui.pushButton_2.clicked.connect(ui.ope11)
    ui.pushButton_3.clicked.connect(ui.exs1)

    sys.exit(app.exec_())
